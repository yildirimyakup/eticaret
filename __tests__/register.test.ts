//mongo db sql enjection kontrolÃ¼ eklenecek


// @ts-ignore
import request from 'supertest';
import mongoose, {Types} from 'mongoose';
import app from '../src/app';
import User from '../src/models/User';
import connectDB from '../src/config/database';

import {generateToken} from "../src/utils/generate.token";


describe('Authentication API Tests', () => {
  const token = generateToken(); // Test iÃ§in token oluÅŸturuluyor
  let userId: string;

  // VeritabanÄ± baÄŸlantÄ±sÄ± ve temizlik iÅŸlemleri
  beforeAll(async () => {
    await connectDB(); // VeritabanÄ±na baÄŸlan
    await User.deleteMany({}); // Testlerden Ã¶nce veritabanÄ±nÄ± temizle
  });

  afterAll(async () => {
    await User.deleteMany({}); // Testlerden sonra veritabanÄ±nÄ± temizle
    await mongoose.connection.close(); // BaÄŸlantÄ±yÄ± kapat
  });

  describe('POST /api/auth/register', () => {
    it('should register a new user successfully', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'Password123!',
        firstName: 'John',
        lastName: 'Doe',
        phone: '1234567890'
      };

      const response = await request(app)
          .post('/api/auth/register')
          .send(userData)
          .expect(201);

      // API yanÄ±tÄ±nÄ± kontrol et
      expect(response.body).toHaveProperty('success', true);
      expect(response.body).toHaveProperty('message');
      expect(response.body).toHaveProperty('data');
      expect(response.body.data).toHaveProperty('email', userData.email);
      expect(response.body.data).toHaveProperty('firstName', userData.firstName);
      expect(response.body.data).toHaveProperty('lastName', userData.lastName);

      // VeritabanÄ±nda kullanÄ±cÄ±nÄ±n oluÅŸturulduÄŸunu doÄŸrula
      const user = await User.findOne({ email: userData.email });
      expect(user).toBeTruthy();
      expect(user?.email).toBe(userData.email);
      expect(user?.firstName).toBe(userData.firstName);
      expect(user?.lastName).toBe(userData.lastName);
      expect(user?.passwordHash).toBeDefined();
      expect(user?.passwordHash).not.toBe(userData.password); // Åžifrenin hash'lendiÄŸinden emin ol
    });
    it('should return an error for existing email', async () => {
      // Ã–nce kullanÄ±cÄ±yÄ± oluÅŸtur
      const existingUser = new User({
        email: 'existing@example.com',
        passwordHash: 'hashedpassword',
        firstName: 'Existing',
        lastName: 'User',
        role: 'user',
        phone: '0987654321',
        isActive: true
      });
      await existingUser.save();

      // AynÄ± e-posta ile kayÄ±t giriÅŸimi
      const userData = {
        email: 'existing@example.com',
        password: 'Password123!',
        firstName: 'Test',
        lastName: 'User',
        phone: '1234567890'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('message');
      expect(response.body.message).toContain('Bu e-posta adresi zaten kullanÄ±mda.');
    });

    it('should validate required fields', async () => {
      const incompleteUserData = {
        email: 'incomplete@example.com',
        // Eksik alanlar: password, firstName, lastName
        phone: '1234567890'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(incompleteUserData)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('message');
    });

    it('should validate email format', async () => {
      const userData = {
        email: 'invalidemail',
        password: 'Password123!',
        firstName: 'Test',
        lastName: 'User',
        phone: '1234567890'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('message');
      expect(response.body.message).toContain('LÃ¼tfen geÃ§erli bir e-posta adresi girin.');
    });

    it('should validate password strength', async () => {
      const userData = {
        email: 'test-password@example.com',
        password: 'weak',
        firstName: 'Test',
        lastName: 'User',
        phone: '1234567890'
      };

      const response = await request(app)
        .post('/api/auth/register')
        .send(userData)
        .expect(400);

      expect(response.body).toHaveProperty('success', false);
      expect(response.body).toHaveProperty('message');
      expect(response.body.message).toContain('Åžifre en az 8 karakter uzunluÄŸunda, bir bÃ¼yÃ¼k harf, bir kÃ¼Ã§Ã¼k harf ve bir rakam iÃ§ermelidir.');
    });
    //Telefon numarasÄ±nÄ±n doÄŸruluÄŸunu kontrol et
    it('should validate phone number format', async () => {
      const userData = {
        email: 'phoneformat@example.com',
        password: 'Password123!',
        firstName: 'Test',
        lastName: 'User',
        phone: '123' // Ã§ok kÄ±sa, geÃ§ersiz
      };

      const response = await request(app)
          .post('/api/auth/register')
          .send(userData)
          .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toContain('LÃ¼tfen geÃ§erli bir telefon numarasÄ± girin. BaÅŸÄ±nda \'0\' olmadan 10 haneli yazÄ±nÄ±z (Ã¶rnek: 5301234567).');
    });

    //BoÅŸ alanlarÄ± kontrol et
    it('should return an error if required fields are empty strings', async () => {
      const userData = {
        email: '',
        password: '',
        firstName: '',
        lastName: '',
        phone: ''
      };

      const response = await request(app)
          .post('/api/auth/register')
          .send(userData)
          .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toContain('TÃ¼m alanlar (email, ÅŸifre, ad, soyad, telefon) doldurulmalÄ±dÄ±r.'); // MesajÄ±nÄ± backend'e gÃ¶re dÃ¼zenle
    });

    // VarsayÄ±lan deÄŸerleri kontrol et
    it('should assign default values to role and isActive', async () => {
      const userData = {
        email: 'defaults@example.com',
        password: 'Password123!',
        firstName: 'Default',
        lastName: 'Values',
        phone: '1234567890'
      };

      const response = await request(app)
          .post('/api/auth/register')
          .send(userData)
          .expect(201);

      const user = await User.findOne({ email: userData.email });

      expect(user).toBeTruthy();
      expect(user?.role).toBe('user'); // varsayÄ±lan rolÃ¼n 'user' olduÄŸunu varsaydÄ±m
      expect(user?.isActive).toBe(false); // varsayÄ±lan aktiflik durumu neyse ona gÃ¶re
    });
    it('should sanitize input to prevent XSS attacks', async () => {
      const userData = {
        email: 'xss@example.com',
        password: 'Password123!',
        firstName: '<script>alert("x")</script>',
        lastName: 'User',
        phone: '1234567890'
      };

      const response = await request(app)
          .post('/api/auth/register')
          .send(userData)
          .expect(201);

      const user = await User.findOne({ email: userData.email });

      expect(user?.firstName).not.toContain('<script>');
    });

  });

  describe('POST /api/auth/verify-email', () => {
    beforeAll(async () => {
      const user = new User({
        email: 'verifyme@example.com',
        passwordHash: 'hashedpassword',
        firstName: 'Verify',
        lastName: 'User',
        role: 'user',
        phone: '5301234567',
        isActive: false,
        verificationToken: token
      });

      const savedUser = await user.save();
      userId = (savedUser._id as Types.ObjectId).toString(); // ðŸ’¡ Tip sorunu Ã§Ã¶zÃ¼mÃ¼
    });

    it('should verify email with valid token', async () => {
      const response = await request(app)
          .post('/api/auth/verify-email')
          .send({ token })
          .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.message).toContain('E-posta baÅŸarÄ±yla doÄŸrulandÄ±. ArtÄ±k giriÅŸ yapabilirsiniz.');

      const updatedUser = await User.findById(userId);
      expect(updatedUser?.isActive).toBe(true); // KullanÄ±cÄ±nÄ±n aktif olduÄŸunu kontrol et
    });

    it('should return 400 for invalid token', async () => {
      const invalidToken = 'thisisinvalid';

      const response = await request(app)
          .post('/api/auth/verify-email')
          .send({ token: invalidToken })
          .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toContain('GeÃ§ersiz veya sÃ¼resi dolmuÅŸ doÄŸrulama token\'Ä±.');
    });

    it('should return 400 for missing token', async () => {
      const response = await request(app)
          .post('/api/auth/verify-email')
          .send({})
          .expect(400);

      expect(response.body.success).toBe(false);
      expect(response.body.message).toContain('DoÄŸrulama token\'Ä± eksik.');
    });
  });
});
